#!/usr/bin/env python3

#from optparse import OptionParser
from argparse import ArgumentParser, FileType
import json
import sys

def main():
    parser = ArgumentParser()
    parser.add_argument("-i", "--infile", dest="infile",
                                metavar="FILE", action="store",
                                #type=FileType('r', 0),
                                help="input file (default: stdin)",
                                default="")
    parser.add_argument("-o", "--outfile", dest="outfile",
                                metavar="FILE", action="store",
                                #type=FileType('wb', 0),
                                help="output file (default: stdout)",
                                default="")
    parser.add_argument("-a", "--all", dest="listall", action="store_true",
                                help="List all columns",
                                default=False)
    parser.add_argument("-c", "--count", dest="count", action="store_true",
                                help="display number of rows found",
                                default=False)
    parser.add_argument("-C", "--countOnly", dest="countO", action="store_true",
                                help="only display number of rows",
                                default=False)
    parser.add_argument("-d", "--describe", dest="describe", action="store_true",
                                help="List column names and exit",
                                default=False)
    parser.add_argument("-e", "--printEmpty", dest="iempty", action="store_false",
                                help="print empty rows",
                                default=True)
    parser.add_argument("-l", "--listColumnNames", dest="listR", action="store_true",
                                help="List column names above rows",
                                default=False)
    parser.add_argument("-q", "--quiet", dest="quiet", action="store_false",
                                help="suppress warnings",
                                default=True)
    parser.add_argument("-r", "--removeDuplicates", dest="rmd", action="store_true",
                                help="Remove duplicate rows while printing",
                                default=False)
    parser.add_argument("-s", "--search", dest="search", action="append",
                                help="Show only rows with this value",
                                metavar="VALUE")
    parser.add_argument("-S", "--Search", dest="searchcol", action="append",
                                help="Show only rows with given value in given column",
                                nargs=2, metavar='COLUMN VALUE')
    parser.add_argument("-w", "--dataWrapper", dest="dataName",
                                metavar="STR", action="store",
                                help="Json Data name (default: data)",
                                default="data")
    parser.add_argument("columns", metavar="column", nargs="*",
                                help="columns to be displayed")
    options = parser.parse_args()
    args = options.columns
    # if no columns are given, say so
    if not args and not options.describe and not options.listall:
        print("No columns to display")
    # open input file or stdin
    if options.infile:
        inf = open(options.infile, 'r')
    else:
        if(options.quiet):
            print("No input file, reading from stdin")
        inf = sys.stdin
    # open output file or stdout
    if options.outfile:
        outf = open(options.outfile, 'w')
    else:
        outf = sys.stdout
    # read in the json file
    values = json.load(inf)

    # if we should descirbe the json or output it
    if options.describe:
        # if describe, read rows and output column names
        L = 1
        # make a list of all column names in first row
        for c in values[options.dataName][0].keys():
            if len(str(c)) > L:
                L = len(str(c))
        L = L + 2
        if options.count or options.countO:
            print("Columns: "+str(L))
        # output each column name
        if not options.countO:
            for c in values[options.dataName][0].keys():
                outf.write(str(c)+"\n")
    else:
        # if we are not describing, we're output rows
        output = []  # the output we will print at the end
        arguments = args  # a list of all columns asked for
        # if we should list all columns
        if options.listall:
            # if we list all columns, then add all column names to arguments
            for x in values[options.dataName][0].keys():
                arguments.append(x)
        # if we should list column names above each row
        if(options.listR):
            # start the output with an empty string that we can add to
            output.append("")
            # for each argument asked for, output that as a column
            for arg in arguments:
                output[0] = output[0] + (str(arg)+" ")
        i = 1  # counter
        # start going through the json
        for row in values[options.dataName]:
            i = i+1
            flag = False  # flag for is row is empty (so it can be ignored)
            out = ""  # output for current row
            for arg in arguments:  # for each column asked for
                if arg in row:  # if the column exists in the row
                    if row[arg] != "":  # if the data is not empty
                        if not options.search and not options.searchcol:
                            flag = True
                        else:
                            if options.search:
                                for v in options.search:
                                    if v in str(row[arg]):
                                        flag = True
                            if options.searchcol:
                                flag2 = 0
                                for k, v in options.searchcol:
                                    if v in str(row[k]):
                                        flag2 = flag2 + 1
                                if flag2 >= len(options.searchcol):
                                    flag = True
                    out = out + (str(row[arg]) + ", ")
            if not (not flag and options.iempty):  # if empty but we don't care
                if not (out in output and options.rmd): # check for duplicates
                    output.append(out)
        if options.count or options.countO:
            print("Rows: "+str(len(output)))
        if not options.countO:
            for r in output:
                outf.write(str(r)+'\n')
    if inf is not sys.stdin:
        inf.close()
    if outf is not sys.stdout:
        outf.close()

if __name__ == "__main__":
    main()
