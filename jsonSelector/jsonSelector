#!/usr/bin/env python3

from optparse import OptionParser
import json
import sys

def main():
    parser = OptionParser(version="%prog 1.0")
    parser.add_option("-i", "--infile", dest="infile",
                                type="string", metavar="FILE", action="store",
                                help="input file",
                                default="")
    parser.add_option("-o", "--outfile", dest="outfile",
                                type="string", metavar="FILE", action="store",
                                help="output file",
                                default="")
    parser.add_option("-a", "--all", dest="listall", action="store_true",
                                help="List all columns",
                                default=False)
    parser.add_option("-d", "--describe", dest="describe", action="store_true",
                                help="List column names and exit",
                                default=False)
    parser.add_option("-e", "--printEmpty", dest="iempty", action="store_false",
                                help="print empty rows",
                                default=True)
    parser.add_option("-l", "--listColumnNames", dest="listR", action="store_true",
                                help="List column names above rows",
                                default=False)
    parser.add_option("-q", "--quiet", dest="quiet", action="store_false",
                                help="suppress warnings",
                                default=True)
    parser.add_option("-r", "--removeDuplicates", dest="rmd", action="store_true",
                                help="Remove duplicate rows while printing",
                                default=False)
    parser.add_option("-w", "--dataWrapper", dest="dataName",
                                type="string", metavar="STR", action="store",
                                help="Json Data name  default: data",
                                default="data")
    (options, args) = parser.parse_args()
    if options.infile != "":
        inf = open(options.infile, 'r')
    else:
        if(options.quiet):
            print("No input file, reading from stdin")
        stin = sys.stdin.readlines()
        inf = stin
    if options.outfile != "":
        outf = open(options.outfile, 'w')
    else:
        outf = sys.stdout
    values = json.load(inf)
    #print(values)
    if options.describe:
        L=1
        for c in values[options.dataName][0].keys():
            if len(str(c)) > L:
                L = len(str(c))
        L=L+2
        for c in values[options.dataName][0].keys():
            outf.write(str(c)+"\n")
            ##outf.write(str(len(str((values[options.dataName][0].keys())[:,0])).max()))
            #outf.write("-"*L+"\n")
            #outf.write("|"+str(c)+(" "*(L-2-len(str(c))))+"|\n")
        #outf.write("-"*L+'\n')
    else:
        output = []
        arguments = args
        if options.listall:
            for x in values[options.dataName][0].keys():
                arguments.append(x)
        if(options.listR):
            output.append("")
            for arg in arguments:
                output[0] = output[0] + (str(arg)+" ")
                #outf.write(str(arg)+" ")
            #outf.write("\n")
        i = 1
        for row in values[options.dataName]:
            i = i+1
            flag = False
            out = ""
            for arg in arguments:
                if(arg in row):
                    if(row[arg] !=""):
                        flag = True
                    out = out +(str(row[arg])+" ")
            if( not( not flag and options.iempty)):
                if not(out in output and options.rmd):
                    output.append(out)
                #outf.write(out)
                #outf.write("\n")
        for r in output:
            outf.write(str(r)+'\n')
    if inf is not sys.stdin:
        inf.close()
    if outf is not sys.stdout:
        outf.close()

if __name__ == "__main__":
    main()
